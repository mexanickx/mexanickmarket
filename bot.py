#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Mexanick Market

"""
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_healthcheck_server():
    server = HTTPServer(("0.0.0.0", 8000), HealthHandler)
    server.serve_forever()

threading.Thread(target=run_healthcheck_server, daemon=True).start()
import asyncio
from datetime import datetime
import pytz
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
import aiosqlite
import sqlite3

# ---------------- CONFIG ----------------
BOT_TOKEN = "8379265766:AAEz5DHkaF3o-edaSR2jJftRpBPADUmo6ds"           
CRYPTO_TOKEN = "369438:AAEKsbWPZPQ0V3YNV4O0GHcWTvSbzkEar43"       
ADMIN_ID = 1041720539                       
ADMIN_USERNAME = "@mexanickq"
DB_FILE = "mexanick_market.db"
MARKET_NAME = "üíéMexanick Marketüíé"
CRYPTO_PAY_URL = 'https://pay.crypt.bot/api'
CRYPTO_ASSETS = ['USDT','BTC','ETH','TON','TRX']
ASSET_MAP = {'USDT':'tether','BTC':'bitcoin','ETH':'ethereum','TON':'the-open-network','TRX':'tron'}
# ----------------------------------------

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ---------------- States ----------------
class DepositState(StatesGroup):
    asset = State()
    amount = State()

class SellerCreate(StatesGroup):
    info = State()

class SellerEditInfo(StatesGroup):
    info = State()

class AddProduct(StatesGroup):
    photo = State()
    title = State()
    desc = State()
    price = State()
    quantity = State()
    content = State()

class EditProduct(StatesGroup):
    field = State()
    value = State()

class AdminNewCategory(StatesGroup):
    name = State()

class AdminEditCategory(StatesGroup):
    cat_id = State()
    name = State()

class AdminNewSub(StatesGroup):
    name = State()

class AdminEditSub(StatesGroup):
    sub_id = State()
    name = State()

class AdminSearchUser(StatesGroup):
    user_id = State()

class AdminBalanceChange(StatesGroup):
    amount = State()

class AdminProdSearch(StatesGroup):
    prod_id = State()

class AdminEditProduct(StatesGroup):
    name = State()
    desc = State()

class ReviewState(StatesGroup):
    rating = State()
    text = State()

class DisputeState(StatesGroup):
    description = State()

class AdminCloseDispute(StatesGroup):
    reason = State()

class SettingsState(StatesGroup):
    action = State()

# ---------------- Database helpers ----------------
async def init_db():
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        await conn.executescript("""
        CREATE TABLE IF NOT EXISTS users(
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            balance REAL DEFAULT 0.0,
            notify_enabled INTEGER DEFAULT 1
        );
        CREATE TABLE IF NOT EXISTS invoices(
            invoice_id INTEGER PRIMARY KEY,
            user_id INTEGER,
            amount REAL,
            asset TEXT,
            status TEXT DEFAULT 'unpaid',
            hash TEXT,
            created_at TEXT
        );
        CREATE TABLE IF NOT EXISTS categories(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE
        );
        CREATE TABLE IF NOT EXISTS subcategories(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_id INTEGER,
            name TEXT
        );
        CREATE TABLE IF NOT EXISTS sellers(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            info TEXT
        );
        CREATE TABLE IF NOT EXISTS products(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_id INTEGER,
            title TEXT,
            description TEXT,
            photo_file_id TEXT,
            category_id INTEGER,
            subcategory_id INTEGER,
            price REAL,
            quantity INTEGER DEFAULT 1,
            content_text TEXT,
            content_file_id TEXT,
            created_at TEXT
        );
        CREATE TABLE IF NOT EXISTS reviews(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            user_id INTEGER,
            username TEXT,
            rating INTEGER,
            text TEXT,
            created_at TEXT
        );
        CREATE TABLE IF NOT EXISTS disputes(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            user_id INTEGER,
            description TEXT,
            status TEXT DEFAULT 'open',
            created_at TEXT,
            close_reason TEXT
        );
        CREATE TABLE IF NOT EXISTS settings(
            key TEXT PRIMARY KEY,
            value TEXT
        );
        CREATE TABLE IF NOT EXISTS orders(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            seller_id INTEGER,
            price REAL,
            created_at TEXT
        );
        INSERT OR IGNORE INTO settings(key,value) VALUES ('maintenance','off');
        """)
        await conn.commit()

# ---------------- Utility ----------------
def now_iso():
    msk_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(msk_tz).isoformat()

async def is_maintenance():
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT value FROM settings WHERE key='maintenance'") as cur:
            r = await cur.fetchone()
            return r and r['value'] == 'on'

async def maintenance_block(message: types.Message | CallbackQuery):
    if await is_maintenance():
        text = "üõ†Ô∏è –°–µ–π—á–∞—Å –∏–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(message, CallbackQuery):
            await message.answer(text)
            await bot.send_message(message.message.chat.id, text)
        else:
            await message.answer(text)
        return True
    return False

async def ensure_user_record(user: types.User):
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("INSERT OR IGNORE INTO users(user_id,username,balance,notify_enabled) VALUES (?,?,?,?)", 
                         (user.id, user.username, 0.0, 1))
        await conn.execute("UPDATE users SET username = ? WHERE user_id = ?", (user.username, user.id))
        await conn.commit()

async def is_notify_enabled(user_id: int) -> bool:
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT notify_enabled FROM users WHERE user_id=?", (user_id,)) as cur:
            r = await cur.fetchone()
            return r['notify_enabled'] == 1 if r else True

def format_money(amount):
    return f"{amount:.2f} RUB"

# ---------------- MARKUP HELPER ----------------
def simple_markup(buttons_list):
    """–°–æ–∑–¥–∞—ë—Ç InlineKeyboardMarkup –¥–ª—è aiogram 3.20.0"""
    inline_keyboard = []
    for row in buttons_list:
        if isinstance(row, list):
            inline_keyboard.append(row)
        else:
            inline_keyboard.append([row])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

# ---------------- Inline markups ----------------
def main_menu_markup(user_id: int):
    buttons = [
        [
            InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="menu_balance"),
            InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="menu_deposit")
        ],
        [
            InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="menu_products"),
            InlineKeyboardButton(text="‚ûï –ü—Ä–æ–¥–∞—Ç—å", callback_data="menu_sell")
        ],
        [
            InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="menu_my_orders"),
            InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")
        ],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")]
    ]
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="menu_admin")])
    return simple_markup(buttons)

def cancel_markup(text="–û—Ç–º–µ–Ω–∞"):
    return simple_markup([InlineKeyboardButton(text="‚ùå " + text, callback_data="action_cancel")])

async def build_categories_markup(admin_view=False):
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id,name FROM categories ORDER BY name") as cur:
            cats = await cur.fetchall()
    
    buttons = []
    for c in cats:
        buttons.append([InlineKeyboardButton(text=f"üìÅ {c['name']}", callback_data=f"cat|{c['id']}")])
    
    if admin_view:
        buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_create_category")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")])
    
    return simple_markup(buttons)

async def build_admin_categories_markup():
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id,name FROM categories ORDER BY name") as cur:
            cats = await cur.fetchall()
    
    buttons = []
    for c in cats:
        buttons.append([
            InlineKeyboardButton(text=f"üìÅ {c['name']}", callback_data=f"admin_view_cat|{c['id']}"),
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"admin_edit_cat|{c['id']}"),
            InlineKeyboardButton(text="üóë", callback_data=f"admin_delete_cat|{c['id']}")
        ])
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_create_category")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")])
    
    return simple_markup(buttons)

async def build_admin_subcategories_markup(cat_id):
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id,name FROM subcategories WHERE category_id=? ORDER BY name", (cat_id,)) as cur:
            subs = await cur.fetchall()
    
    buttons = []
    for s in subs:
        buttons.append([
            InlineKeyboardButton(text=f"üìÇ {s['name']}", callback_data=f"list_products|sub|{s['id']}|1"),
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"admin_edit_sub|{s['id']}"),
            InlineKeyboardButton(text="üóë", callback_data=f"admin_delete_sub|{s['id']}")
        ])
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"admin_create_sub|{cat_id}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cats")])
    
    return simple_markup(buttons)

# ---------------- Crypto ----------------
def crypto_headers():
    return {'Crypto-Pay-API-Token': CRYPTO_TOKEN, 'Content-Type': 'application/json'}

def get_rate(asset):
    coin_id = ASSET_MAP.get(asset)
    if not coin_id:
        raise ValueError("Unknown asset")
    try:
        r = requests.get(f'https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=rub', timeout=8)
        r.raise_for_status()
        data = r.json()
        return float(data[coin_id]['rub'])
    except Exception:
        return 100.0

def create_invoice(asset, amount, description, user_id):
    payload = {'asset': asset, 'amount': str(amount), 'description': description}
    try:
        r = requests.post(f'{CRYPTO_PAY_URL}/createInvoice', json=payload, headers=crypto_headers(), timeout=10)
        r.raise_for_status()
        resp = r.json()
        if resp.get('ok'):
            inv = resp['result']
            asyncio.create_task(save_invoice_db(int(inv['invoice_id']), user_id, amount, asset, inv.get('hash')))
        return resp
    except Exception as e:
        logging.error("create_invoice error: %s", e)
        return {'ok': False, 'error': str(e)}

async def save_invoice_db(invoice_id, user_id, amount, asset, hash_val):
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("INSERT OR IGNORE INTO invoices(invoice_id,user_id,amount,asset,hash,created_at) VALUES (?,?,?,?,?,?)",
                           (invoice_id, user_id, amount, asset, hash_val, now_iso()))
        await conn.commit()

def get_invoices(invoice_ids):
    try:
        payload = {'invoice_ids': ','.join(map(str, invoice_ids))}
        r = requests.get(f'{CRYPTO_PAY_URL}/getInvoices', params=payload, headers=crypto_headers(), timeout=10)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        logging.error("get_invoices error: %s", e)
        return {'ok': False, 'error': str(e)}

async def background_payment_checker():
    while True:
        try:
            async with aiosqlite.connect(DB_FILE) as conn:
                conn.row_factory = aiosqlite.Row
                async with conn.execute("SELECT invoice_id FROM invoices WHERE status='unpaid'") as cur:
                    rows = await cur.fetchall()
            if rows:
                invoice_ids = [r['invoice_id'] for r in rows]
                resp = get_invoices(invoice_ids)
                if resp.get('ok'):
                    items = resp['result'].get('items', [])
                    for it in items:
                        if it.get('status') == 'paid':
                            invoice_id = int(it['invoice_id'])
                            async with aiosqlite.connect(DB_FILE) as conn:
                                conn.row_factory = aiosqlite.Row
                                async with conn.execute("SELECT user_id,amount,asset FROM invoices WHERE invoice_id=?", (invoice_id,)) as cur:
                                    row = await cur.fetchone()
                                if row:
                                    user_id, amount, asset = row['user_id'], row['amount'], row['asset']
                                    try:
                                        rate = get_rate(asset)
                                        rub_amount = float(amount) * float(rate)
                                    except Exception:
                                        rub_amount = 0.0
                                    await conn.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (rub_amount, user_id))
                                    await conn.execute("UPDATE invoices SET status='paid' WHERE invoice_id=?", (invoice_id,))
                                    await conn.commit()
                                    if await is_notify_enabled(user_id):
                                        try:
                                            await bot.send_message(user_id, f"üéâ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {rub_amount:.2f} RUB")
                                        except Exception:
                                            pass
        except Exception as e:
            logging.error("Payment checker loop error: %s", e)
        await asyncio.sleep(20)

# ---------------- Handlers ----------------
@dp.message(CommandStart())
async def handler_start(message: Message):
    if await maintenance_block(message): return
    await ensure_user_record(message.from_user)
    await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *{MARKET_NAME}*!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", 
                        parse_mode="Markdown", 
                        reply_markup=main_menu_markup(message.from_user.id))

# --- Balance & deposit ---
@dp.callback_query(lambda c: c.data == "menu_balance")
async def cb_balance(callback: CallbackQuery):
    if await maintenance_block(callback): return
    await ensure_user_record(callback.from_user)
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT balance FROM users WHERE user_id=?", (callback.from_user.id,)) as cur:
            bal = (await cur.fetchone())['balance']
    text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *{format_money(bal)}*"
    markup = simple_markup([
        [InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="menu_deposit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
    ])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "menu_deposit")
async def cb_deposit(callback: CallbackQuery, state: FSMContext):
    if await maintenance_block(callback): return
    markup = simple_markup([
        [InlineKeyboardButton(text="USDT", callback_data="deposit_asset|USDT"), 
         InlineKeyboardButton(text="BTC", callback_data="deposit_asset|BTC")],
        [InlineKeyboardButton(text="ETH", callback_data="deposit_asset|ETH"), 
         InlineKeyboardButton(text="TON", callback_data="deposit_asset|TON")],
        [InlineKeyboardButton(text="TRX", callback_data="deposit_asset|TRX")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
    ])
    await callback.message.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—á–µ—Ä–µ–∑ CryptoBot):", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("deposit_asset|"))
async def cb_deposit_asset(callback: CallbackQuery, state: FSMContext):
    if await maintenance_block(callback): return
    asset = callback.data.split("|", 1)[1]
    await state.set_state(DepositState.amount)
    await state.set_data({"asset": asset})
    await callback.message.answer(f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ *{asset}*:", 
                                parse_mode="Markdown", reply_markup=cancel_markup())
    await callback.answer()

@dp.message(DepositState.amount)
async def process_deposit_amount(message: Message, state: FSMContext):
    data = await state.get_data()
    asset = data.get("asset")
    if message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"]:
        await message.answer("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    try:
        rub = float(message.text.strip().replace(',', '.'))
        if rub <= 0:
            raise ValueError("<=0")
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1000.50).", reply_markup=cancel_markup())
        return
    try:
        rate = get_rate(asset)
        crypto_amount = rub / rate
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    resp = create_invoice(asset, crypto_amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {MARKET_NAME} –¥–ª—è {message.from_user.id}", message.from_user.id)
    if resp.get('ok'):
        inv = resp['result']
        pay_url = f"https://t.me/CryptoBot/app?startapp=invoice-{inv.get('hash')}&mode=compact"
        markup = simple_markup([
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"invoice_cancel|{inv.get('invoice_id')}")]
        ])
        await message.answer(f"üí≥ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω:\n–°—É–º–º–∞: *{rub:.2f} RUB* (~{crypto_amount:.6f} {asset})\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (CryptoBot).", 
                           parse_mode="Markdown", reply_markup=markup)
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {resp.get('error')}", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("invoice_cancel|"))
async def cb_invoice_cancel(callback: CallbackQuery):
    inv_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT user_id,status FROM invoices WHERE invoice_id=?", (inv_id,)) as cur:
            r = await cur.fetchone()
        if not r:
            await callback.message.answer("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        if r['user_id'] != callback.from_user.id:
            await callback.message.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Å—á–µ—Ç.")
            await callback.answer()
            return
        if r['status'] != 'unpaid':
            await callback.message.answer("–°—á–µ—Ç —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
            await callback.answer()
            return
        await conn.execute("DELETE FROM invoices WHERE invoice_id=?", (inv_id,))
        await conn.commit()
    await callback.message.answer("‚ùå –°—á–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_markup(callback.from_user.id))
    await callback.answer()

# ---------------- Categories & Products ----------------
@dp.callback_query(lambda c: c.data == "menu_products")
async def cb_products(callback: CallbackQuery):
    if await maintenance_block(callback): return
    await ensure_user_record(callback.from_user)
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT COUNT(*) as cnt FROM products") as cur:
            total = (await cur.fetchone())['cnt']
    text = f"üõç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total})"
    markup = await build_categories_markup(admin_view=(callback.from_user.id == ADMIN_ID))
    await callback.message.answer(text, reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cat|"))
async def cb_category(callback: CallbackQuery):
    if await maintenance_block(callback): return
    cat_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT name FROM categories WHERE id=?", (cat_id,)) as cur:
            cat = await cur.fetchone()
        async with conn.execute("SELECT id,name FROM subcategories WHERE category_id=? ORDER BY name", (cat_id,)) as cur:
            subs = await cur.fetchall()
    if not cat:
        await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    buttons = [[InlineKeyboardButton(text="üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"list_products|cat|{cat_id}|1")]]
    for s in subs:
        buttons.append([InlineKeyboardButton(text=f"üìÇ {s['name']}", callback_data=f"list_products|sub|{s['id']}|1")])
    if callback.from_user.id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"admin_create_sub|{cat_id}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_products")])
    markup = simple_markup(buttons)
    await callback.message.answer(f"üìÅ *{cat['name']}*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã:", 
                                parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("list_products|"))
async def cb_list_products(callback: CallbackQuery):
    if await maintenance_block(callback): return
    parts = callback.data.split("|")
    mode = parts[1]
    ident = int(parts[2])
    page = int(parts[3])
    per_page = 10
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        if mode == "cat":
            async with conn.execute("SELECT COUNT(*) as cnt FROM products WHERE category_id=?", (ident,)) as cur:
                total = (await cur.fetchone())['cnt']
            async with conn.execute("SELECT id,title FROM products WHERE category_id=? ORDER BY created_at DESC LIMIT ? OFFSET ?", 
                                    (ident, per_page, (page-1)*per_page)) as cur:
                prods = await cur.fetchall()
        else:
            async with conn.execute("SELECT COUNT(*) as cnt FROM products WHERE subcategory_id=?", (ident,)) as cur:
                total = (await cur.fetchone())['cnt']
            async with conn.execute("SELECT id,title FROM products WHERE subcategory_id=? ORDER BY created_at DESC LIMIT ? OFFSET ?", 
                                    (ident, per_page, (page-1)*per_page)) as cur:
                prods = await cur.fetchall()
    if not prods:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_menu_markup(callback.from_user.id))
        await callback.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    buttons = []
    for p in prods:
        buttons.append([InlineKeyboardButton(text=f"üõí {p['title']}", callback_data=f"view_product|{p['id']}")])
    total_pages = (total + per_page - 1) // per_page
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è Prev", callback_data=f"list_products|{mode}|{ident}|{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="Next ‚ñ∂Ô∏è", callback_data=f"list_products|{mode}|{ident}|{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat|{ident}" if mode == "cat" else f"list_products|cat|{ident}|1")])
    markup = simple_markup(buttons)
    await callback.message.answer(f"–¢–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("view_product|"))
async def cb_view_product(callback: CallbackQuery):
    if await maintenance_block(callback): return
    pid = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("""SELECT p.*, s.user_id as seller_user_id, s.username as seller_username
                                FROM products p LEFT JOIN sellers s ON p.seller_id = s.id WHERE p.id=?""", (pid,)) as cur:
            p = await cur.fetchone()
    if not p:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT AVG(rating) as avg, COUNT(*) as cnt FROM reviews WHERE product_id=?", (pid,)) as cur:
            stats = await cur.fetchone()
            avg = stats['avg'] if stats['avg'] else 0.0
            cnt = stats['cnt']
    msk_tz = pytz.timezone('Europe/Moscow')
    created_at_msk = datetime.fromisoformat(p['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
    text = f"üõí *{p['title']}* (ID: {p['id']})\n\n{p['description']}\n\nüíµ –¶–µ–Ω–∞: *{format_money(p['price'])}*\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {p['quantity']}\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{p['seller_username'] or '-'}\n‚≠ê –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: *{avg:.1f}* / 5.0 ({cnt} –æ—Ç–∑—ã–≤–æ–≤)\nüìÖ –°–æ–∑–¥–∞–Ω: {created_at_msk}"
    markup = simple_markup([
        [
            InlineKeyboardButton(text="üõç –ö—É–ø–∏—Ç—å", callback_data=f"buy|{pid}"),
            InlineKeyboardButton(text="üìù –û—Ç–∑—ã–≤", callback_data=f"review|{pid}")
        ],
        [InlineKeyboardButton(text="üë§ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=f"seller_card|{p['seller_user_id']}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_products")]
    ])
    if p['photo_file_id']:
        await bot.send_photo(callback.message.chat.id, p['photo_file_id'], caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

# ---------------- Seller Card ----------------
@dp.callback_query(lambda c: c.data.startswith("seller_card|"))
async def cb_seller_card(callback: CallbackQuery):
    if await maintenance_block(callback): return
    seller_user_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id,username,info,user_id FROM sellers WHERE user_id=?", (seller_user_id,)) as cur:
            s = await cur.fetchone()
        if not s:
            await callback.message.answer("–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        async with conn.execute("SELECT COUNT(*) as cnt FROM products WHERE seller_id=?", (s['id'],)) as cur:
            total_products = (await cur.fetchone())['cnt']
        async with conn.execute("""SELECT AVG(r.rating) as avg, COUNT(r.id) as cnt FROM reviews r
                                JOIN products p ON r.product_id = p.id
                                WHERE p.seller_id = ?""", (s['id'],)) as cur:
            st = await cur.fetchone()
            avg = st['avg'] or 0.0
            cnt = st['cnt'] or 0
        async with conn.execute("""SELECT r.username, r.rating, r.text, r.created_at
                                FROM reviews r
                                JOIN products p ON r.product_id = p.id
                                WHERE p.seller_id = ?
                                ORDER BY r.created_at DESC LIMIT 5""", (s['id'],)) as cur:
            reviews = await cur.fetchall()
    msk_tz = pytz.timezone('Europe/Moscow')
    reviews_text = ""
    for r in reviews:
        uname = r['username'] or '–∞–Ω–æ–Ω'
        created_at_msk = datetime.fromisoformat(r['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
        reviews_text += f"‚≠ê {r['rating']}/5 ‚Äî @{uname} ({created_at_msk}): {r['text'] or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
    text = (f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* @{s['username'] or '–∞–Ω–æ–Ω'}\n"
            f"üìå –û –ø—Ä–æ–¥–∞–≤—Ü–µ: {s['info'] or '-'}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {total_products}\n‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: *{avg:.1f}* / 5.0 ({cnt} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
            f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n{reviews_text or '–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.'}")
    markup = simple_markup([
        [InlineKeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=f"list_seller_products|{s['id']}|1")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_products")]
    ])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("list_seller_products|"))
async def cb_list_seller_products(callback: CallbackQuery):
    parts = callback.data.split("|")
    sid = int(parts[1])
    page = int(parts[2]) if len(parts) > 2 else 1
    per_page = 10
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT COUNT(*) as cnt FROM products WHERE seller_id=?", (sid,)) as cur:
            total = (await cur.fetchone())['cnt']
        async with conn.execute("SELECT id,title FROM products WHERE seller_id=? ORDER BY created_at DESC LIMIT ? OFFSET ?", 
                                (sid, per_page, (page-1)*per_page)) as cur:
            prods = await cur.fetchall()
    if not prods:
        await callback.message.answer("–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_menu_markup(callback.from_user.id))
        await callback.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    buttons = []
    for p in prods:
        buttons.append([InlineKeyboardButton(text=f"üõí {p['title']}", callback_data=f"view_product|{p['id']}")])
    total_pages = (total + per_page - 1) // per_page
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è Prev", callback_data=f"list_seller_products|{sid}|{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="Next ‚ñ∂Ô∏è", callback_data=f"list_seller_products|{sid}|{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_products")])
    markup = simple_markup(buttons)
    await callback.message.answer(f"–¢–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):", reply_markup=markup)
    await callback.answer()

# ---------------- Buy & Reviews & Disputes logic ----------------
@dp.callback_query(lambda c: c.data.startswith("buy|"))
async def cb_buy(callback: CallbackQuery):
    if await maintenance_block(callback): return
    pid = int(callback.data.split("|", 1)[1])
    await ensure_user_record(callback.from_user)
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id,title,price,quantity,content_text,content_file_id,seller_id FROM products WHERE id=?", (pid,)) as cur:
            p = await cur.fetchone()
        if not p:
            await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        if p['quantity'] <= 0:
            await callback.message.answer("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")
            await callback.answer()
            return
        async with conn.execute("SELECT balance FROM users WHERE user_id=?", (callback.from_user.id,)) as cur:
            bal = (await cur.fetchone())['balance']
    if bal < p['price']:
        await callback.message.answer(f"‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ {format_money(bal)}, —Ü–µ–Ω–∞: {format_money(p['price'])}. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", 
                                    reply_markup=main_menu_markup(callback.from_user.id))
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        await conn.execute("UPDATE users SET balance = balance - ? WHERE user_id=?", (p['price'], callback.from_user.id))
        await conn.execute("UPDATE users SET balance = balance + ? WHERE user_id = (SELECT user_id FROM sellers WHERE id=?)", 
                         (p['price'], p['seller_id']))
        await conn.execute("UPDATE products SET quantity = quantity - 1 WHERE id=?", (pid,))
        async with conn.execute("INSERT INTO orders(user_id, product_id, seller_id, price, created_at) VALUES (?, ?, ?, ?, ?) RETURNING id", 
                              (callback.from_user.id, pid, p['seller_id'], p['price'], now_iso())) as cur:
            row = await cur.fetchone()
            order_id = row['id'] if row else None
        await conn.commit()
    if not order_id:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        await callback.answer()
        return
    await callback.message.answer(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ *{p['title']}* –∑–∞ {format_money(p['price'])}.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", 
                                parse_mode="Markdown")
    # Send content
    if p['content_text']:
        await callback.message.answer(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–≤–∞—Ä–∞: {p['content_text']}")
    elif p['content_file_id']:
        try:
            await bot.send_document(callback.message.chat.id, p['content_file_id'], caption="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–≤–∞—Ä–∞")
        except:
            await bot.send_photo(callback.message.chat.id, p['content_file_id'], caption="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–≤–∞—Ä–∞")
    # Post-purchase options
    markup = simple_markup([
        [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review|{pid}"),
         InlineKeyboardButton(text="‚öñÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dispute|{order_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
    ])
    await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
    # Notify seller
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT user_id FROM sellers WHERE id=?", (p['seller_id'],)) as cur:
            seller = await cur.fetchone()
    if seller and await is_notify_enabled(seller['user_id']):
        try:
            await bot.send_message(seller['user_id'], 
                                 f"üéâ –í–∞—à —Ç–æ–≤–∞—Ä *{p['title']}* –∫—É–ø–ª–µ–Ω –∑–∞ {format_money(p['price'])}!\n–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.", 
                                 parse_mode="Markdown")
        except Exception:
            pass
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("review|"))
async def cb_review(callback: CallbackQuery, state: FSMContext):
    if await maintenance_block(callback): return
    pid = int(callback.data.split("|", 1)[1])
    user_id = callback.from_user.id
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT 1 FROM orders WHERE user_id=? AND product_id=? LIMIT 1", (user_id, pid)) as cur:
            purchased = await cur.fetchone() is not None
        async with conn.execute("SELECT 1 FROM reviews WHERE product_id=? AND user_id=? LIMIT 1", (pid, user_id)) as cur:
            already = await cur.fetchone() is not None
    if not purchased:
        await callback.message.answer("–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!")
        await callback.answer()
        return
    if already:
        await callback.message.answer("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.")
        await callback.answer()
        return
    markup = simple_markup([
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5", callback_data=f"leave_rating|{pid}|5")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê 4", callback_data=f"leave_rating|{pid}|4")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê 3", callback_data=f"leave_rating|{pid}|3")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê 2", callback_data=f"leave_rating|{pid}|2")],
        [InlineKeyboardButton(text="‚≠ê 1", callback_data=f"leave_rating|{pid}|1")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_product|{pid}")]
    ])
    await callback.message.answer("‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (1‚Äì5):", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("leave_rating|"))
async def cb_leave_rating(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("|")
    pid = int(parts[1])
    rating = int(parts[2])
    await state.set_state(ReviewState.text)
    await state.set_data({"pid": pid, "rating": rating})
    await callback.message.answer("‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `-` —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=cancel_markup("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    await callback.answer()

@dp.message(ReviewState.text)
async def process_review_text(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data.get("pid")
    rating = data.get("rating")
    text = message.text.strip() if message.text and message.text.strip().lower() not in ["-", "–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"] else ""
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("INSERT INTO reviews(product_id,user_id,username,rating,text,created_at) VALUES (?,?,?,?,?,?)",
                           (pid, message.from_user.id, message.from_user.username, rating, text, now_iso()))
        await conn.commit()
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("dispute|"))
async def cb_dispute(callback: CallbackQuery, state: FSMContext):
    if await maintenance_block(callback): return
    order_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT 1 FROM disputes WHERE order_id=?", (order_id,)) as cur:
            exists = await cur.fetchone() is not None
    if exists:
        await callback.message.answer("–°–ø–æ—Ä –ø–æ —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç.")
        await callback.answer()
        return
    await state.set_state(DisputeState.description)
    await state.set_data({"order_id": order_id})
    await callback.message.answer("‚öñÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–æ —Å–¥–µ–ª–∫–æ–π:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(DisputeState.description)
async def process_dispute_desc(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    desc = message.text.strip()
    data = await state.get_data()
    order_id = data.get("order_id")
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("INSERT INTO disputes(order_id, user_id, description, created_at) VALUES (?, ?, ?, ?)",
                           (order_id, message.from_user.id, desc, now_iso()))
        await conn.commit()
    await message.answer("‚öñÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

# ---------------- Selling ----------------
@dp.callback_query(lambda c: c.data == "menu_sell")
async def cb_menu_sell(callback: CallbackQuery):
    if await maintenance_block(callback): return
    await ensure_user_record(callback.from_user)
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id FROM sellers WHERE user_id=?", (callback.from_user.id,)) as cur:
            s = await cur.fetchone()
    if not s:
        markup = simple_markup([
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data="seller_create")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
        ])
        await callback.message.answer("–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ–¥–∞–≤–µ—Ü. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞, —á—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.", reply_markup=markup)
    else:
        markup = simple_markup([
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data=f"my_products|{callback.from_user.id}|1")],
            [InlineKeyboardButton(text="üí∏ –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏", callback_data=f"my_sales|{s['id']}|1")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
        ])
        await callback.message.answer("üé™ –ü–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "seller_create")
async def cb_seller_create(callback: CallbackQuery, state: FSMContext):
    if await maintenance_block(callback): return
    await state.set_state(SellerCreate.info)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞):", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(SellerCreate.info)
async def process_seller_info(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    info = message.text.strip()
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("INSERT OR IGNORE INTO sellers(user_id,username,info) VALUES (?,?,?)", 
                         (message.from_user.id, message.from_user.username, info))
        await conn.execute("UPDATE sellers SET info=? WHERE user_id=?", (info, message.from_user.id))
        await conn.commit()
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

@dp.callback_query(lambda c: c.data == "seller_edit_info")
async def cb_seller_edit_info(callback: CallbackQuery, state: FSMContext):
    if await maintenance_block(callback): return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id FROM sellers WHERE user_id=?", (callback.from_user.id,)) as cur:
            s = await cur.fetchone()
        if not s:
            await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
    await state.set_state(SellerEditInfo.info)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(SellerEditInfo.info)
async def process_seller_edit_info(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    info = message.text.strip()
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("UPDATE sellers SET info=? WHERE user_id=?", (info, message.from_user.id))
        await conn.commit()
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

# Add product flow
@dp.callback_query(lambda c: c.data == "add_product")
async def cb_add_product(callback: CallbackQuery, state: FSMContext):
    if await maintenance_block(callback): return
    await ensure_user_record(callback.from_user)
    await state.set_state(AddProduct.photo)
    await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∏—Ç—å"))
    await callback.answer()

@dp.message(AddProduct.photo)
async def handle_product_photo(message: Message, state: FSMContext):
    if message.text and message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.text and (message.text.startswith("http://") or message.text.startswith("https://")):
        file_id = message.text.strip()
    await state.update_data(photo=file_id)
    await state.set_state(AddProduct.title)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))

@dp.message(AddProduct.title)
async def handle_product_title(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    await state.update_data(title=message.text.strip())
    await state.set_state(AddProduct.desc)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))

@dp.message(AddProduct.desc)
async def handle_product_desc(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    await state.update_data(desc=message.text.strip())
    await state.set_state(AddProduct.price)
    await message.answer("üíµ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ RUB (–Ω–∞–ø—Ä–∏–º–µ—Ä 499.99):", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))

@dp.message(AddProduct.price)
async def handle_product_price(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    try:
        price = float(message.text.strip().replace(',', '.'))
        if price <= 0: raise ValueError
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=cancel_markup())
        return
    await state.update_data(price=price)
    await state.set_state(AddProduct.quantity)
    await message.answer("üì¶ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))

@dp.message(AddProduct.quantity)
async def handle_product_quantity(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    try:
        quantity = int(message.text.strip())
        if quantity <= 0: raise ValueError
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >0.", reply_markup=cancel_markup())
        return
    await state.update_data(quantity=quantity)
    await state.set_state(AddProduct.content)
    await message.answer("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª):", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))

@dp.message(AddProduct.content)
async def handle_product_content(message: Message, state: FSMContext):
    if message.text and message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    content_text = None
    content_file_id = None
    if message.text:
        content_text = message.text.strip()
    elif message.photo:
        content_file_id = message.photo[-1].file_id
    elif message.document:
        content_file_id = message.document.file_id
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª.", reply_markup=cancel_markup())
        return
    await state.update_data(content_text=content_text, content_file_id=content_file_id)
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id,name FROM categories ORDER BY name") as cur:
            cats = await cur.fetchall()
    buttons = []
    for c in cats:
        buttons.append([InlineKeyboardButton(text=c['name'], callback_data=f"addprod_cat|{c['id']}")])
    if message.from_user.id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_create_category")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="action_cancel")])
    markup = simple_markup(buttons)
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("addprod_cat|"))
async def cb_addprod_cat(callback: CallbackQuery, state: FSMContext):
    cat_id = int(callback.data.split("|", 1)[1])
    await state.update_data(cat_id=cat_id)
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id,name FROM subcategories WHERE category_id=?", (cat_id,)) as cur:
            subs = await cur.fetchall()
    buttons = []
    for s in subs:
        buttons.append([InlineKeyboardButton(text=s['name'], callback_data=f"addprod_sub|{s['id']}")])
    if callback.from_user.id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"admin_create_sub|{cat_id}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="action_cancel")])
    markup = simple_markup(buttons)
    await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("addprod_sub|"))
async def cb_addprod_sub(callback: CallbackQuery, state: FSMContext):
    sub_id = int(callback.data.split("|", 1)[1])
    data = await state.get_data()
    photo = data.get("photo")
    title = data.get("title")
    desc = data.get("desc")
    price = data.get("price")
    quantity = data.get("quantity")
    content_text = data.get("content_text")
    content_file_id = data.get("content_file_id")
    cat_id = data.get("cat_id")
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id FROM sellers WHERE user_id=?", (callback.from_user.id,)) as cur:
            srow = await cur.fetchone()
        if not srow:
            await conn.execute("INSERT INTO sellers(user_id,username) VALUES (?,?)", (callback.from_user.id, callback.from_user.username))
            await conn.commit()
            async with conn.execute("SELECT last_insert_rowid() as id") as cur:
                seller_id = (await cur.fetchone())['id']
        else:
            seller_id = srow['id']
        await conn.execute("""INSERT INTO products(seller_id,title,description,photo_file_id,category_id,subcategory_id,price,quantity,content_text,content_file_id,created_at)
                           VALUES (?,?,?,?,?,?,?,?,?,?,?)""", (seller_id, title, desc, photo, cat_id, sub_id, price, quantity, content_text, content_file_id, now_iso()))
        await conn.commit()
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=main_menu_markup(callback.from_user.id))
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

# ---------------- My products ----------------
@dp.callback_query(lambda c: c.data.startswith("my_products|"))
async def cb_my_products(callback: CallbackQuery):
    parts = callback.data.split("|")
    uid = int(parts[1])
    page = int(parts[2]) if len(parts) > 2 else 1
    per_page = 10
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id FROM sellers WHERE user_id=?", (uid,)) as cur:
            s = await cur.fetchone()
        if not s:
            await callback.message.answer("–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞, —á—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.", reply_markup=main_menu_markup(callback.from_user.id))
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞.")
            return
        seller_id = s['id']
        async with conn.execute("SELECT COUNT(*) as cnt FROM products WHERE seller_id=?", (seller_id,)) as cur:
            total = (await cur.fetchone())['cnt']
        async with conn.execute("SELECT id,title FROM products WHERE seller_id=? ORDER BY created_at DESC LIMIT ? OFFSET ?", 
                                (seller_id, per_page, (page-1)*per_page)) as cur:
            prods = await cur.fetchall()
    if not prods:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_menu_markup(callback.from_user.id))
        await callback.answer()
        return
    buttons = []
    for p in prods:
        buttons.append([InlineKeyboardButton(text=f"üõí {p['title']}", callback_data=f"view_my_product|{p['id']}")])
    total_pages = (total + per_page - 1) // per_page
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è Prev", callback_data=f"my_products|{uid}|{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="Next ‚ñ∂Ô∏è", callback_data=f"my_products|{uid}|{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_sell")])
    markup = simple_markup(buttons)
    await callback.message.answer(f"–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("view_my_product|"))
async def cb_view_my_product(callback: CallbackQuery):
    pid = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT * FROM products WHERE id=?", (pid,)) as cur:
            p = await cur.fetchone()
    if not p or p['seller_id'] != (await get_seller_id(callback.from_user.id)):
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à.")
        await callback.answer()
        return
    msk_tz = pytz.timezone('Europe/Moscow')
    created_at_msk = datetime.fromisoformat(p['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
    text = f"üõí *{p['title']}*\n\n{p['description']}\n\nüíµ –¶–µ–Ω–∞: *{format_money(p['price'])}*\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {p['quantity']}\nüìÖ –°–æ–∑–¥–∞–Ω: {created_at_msk}"
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_product|{pid}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_products|{callback.from_user.id}|1")]
    ]
    markup = simple_markup(buttons)
    if p['photo_file_id']:
        await bot.send_photo(callback.message.chat.id, p['photo_file_id'], caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

async def get_seller_id(user_id):
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id FROM sellers WHERE user_id=?", (user_id,)) as cur:
            s = await cur.fetchone()
            return s['id'] if s else None

@dp.callback_query(lambda c: c.data.startswith("edit_product|"))
async def cb_edit_product(callback: CallbackQuery, state: FSMContext):
    pid = int(callback.data.split("|", 1)[1])
    seller_id = await get_seller_id(callback.from_user.id)
    if not seller_id:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT seller_id FROM products WHERE id=?", (pid,)) as cur:
            p = await cur.fetchone()
        if p['seller_id'] != seller_id:
            await callback.message.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ç–æ–≤–∞—Ä.")
            await callback.answer()
            return
    markup = simple_markup([
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field|{pid}|title"),
         InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field|{pid}|desc")],
        [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data=f"edit_field|{pid}|price"),
         InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_field|{pid}|quantity")],
        [InlineKeyboardButton(text="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data=f"edit_field|{pid}|content")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_my_product|{pid}")]
    ])
    await callback.message.answer("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_field|"))
async def cb_edit_field(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("|")
    pid = int(parts[1])
    field = parts[2]
    await state.set_state(EditProduct.value)
    await state.set_data({"pid": pid, "field": field})
    prompt = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        "desc": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        "price": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:",
        "quantity": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        "content": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª):"
    }[field]
    await callback.message.answer(prompt, reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(EditProduct.value)
async def process_edit_value(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data.get("pid")
    field = data.get("field")
    if message.text and message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    value = None
    if field == "content":
        content_text = None
        content_file_id = None
        if message.text:
            content_text = message.text.strip()
        elif message.photo:
            content_file_id = message.photo[-1].file_id
        elif message.document:
            content_file_id = message.document.file_id
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        async with aiosqlite.connect(DB_FILE) as conn:
            await conn.execute("UPDATE products SET content_text=?, content_file_id=? WHERE id=?", (content_text, content_file_id, pid))
            await conn.commit()
    else:
        try:
            if field in ("price",):
                value = float(message.text.strip().replace(',', '.'))
            elif field in ("quantity",):
                value = int(message.text.strip())
            else:
                value = message.text.strip()
        except Exception:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        async with aiosqlite.connect(DB_FILE) as conn:
            await conn.execute(f"UPDATE products SET {field}=? WHERE id=?", (value, pid))
            await conn.commit()
    await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

# ---------------- My Sales ----------------
@dp.callback_query(lambda c: c.data.startswith("my_sales|"))
async def cb_my_sales(callback: CallbackQuery):
    if await maintenance_block(callback): return
    parts = callback.data.split("|")
    seller_id = int(parts[1])
    page = int(parts[2]) if len(parts) > 2 else 1
    per_page = 10
    msk_tz = pytz.timezone('Europe/Moscow')
    today = datetime.now(msk_tz).strftime('%Y-%m-%d')
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT user_id FROM sellers WHERE id=?", (seller_id,)) as cur:
            s = await cur.fetchone()
        if not s or s['user_id'] != callback.from_user.id:
            await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            await callback.answer()
            return
        async with conn.execute("SELECT COUNT(*) as cnt FROM orders WHERE seller_id=? AND date(created_at)=?", 
                               (seller_id, today)) as cur:
            daily_sales = (await cur.fetchone())['cnt']
        async with conn.execute("SELECT SUM(price) as total FROM orders WHERE seller_id=? AND date(created_at)=?", 
                               (seller_id, today)) as cur:
            daily_profit = (await cur.fetchone())['total'] or 0.0
        async with conn.execute("SELECT COUNT(*) as cnt FROM orders WHERE seller_id=?", (seller_id,)) as cur:
            total = (await cur.fetchone())['cnt']
        async with conn.execute("""SELECT o.id, o.created_at, o.price, p.title 
                                FROM orders o JOIN products p ON o.product_id = p.id 
                                WHERE o.seller_id=? ORDER BY o.created_at DESC LIMIT ? OFFSET ?""", 
                                (seller_id, per_page, (page-1)*per_page)) as cur:
            sales = await cur.fetchall()
    text = f"üí∏ –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏\nüìà –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–Ω–æ: {daily_sales} —Ç–æ–≤–∞—Ä–æ–≤\nüí∞ –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {format_money(daily_profit)}\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):"
    if not sales:
        await callback.message.answer(f"{text}\n–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂.", reply_markup=main_menu_markup(callback.from_user.id))
        await callback.answer()
        return
    buttons = []
    for s in sales:
        created_at_msk = datetime.fromisoformat(s['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
        buttons.append([InlineKeyboardButton(text=f"üõí {s['title']} ({created_at_msk})", callback_data=f"view_sale|{s['id']}")])
    total_pages = (total + per_page - 1) // per_page
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è Prev", callback_data=f"my_sales|{seller_id}|{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="Next ‚ñ∂Ô∏è", callback_data=f"my_sales|{seller_id}|{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_sell")])
    markup = simple_markup(buttons)
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("view_sale|"))
async def cb_view_sale(callback: CallbackQuery):
    if await maintenance_block(callback): return
    order_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("""SELECT o.*, p.title, p.description, u.username as buyer_username
                                FROM orders o 
                                JOIN products p ON o.product_id = p.id 
                                JOIN users u ON o.user_id = u.user_id
                                WHERE o.id=? AND o.seller_id=(SELECT id FROM sellers WHERE user_id=?)""", 
                                (order_id, callback.from_user.id)) as cur:
            s = await cur.fetchone()
    if not s:
        await callback.message.answer("–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")
        await callback.answer()
        return
    msk_tz = pytz.timezone('Europe/Moscow')
    created_at_msk = datetime.fromisoformat(s['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
    text = (f"üõí –ü—Ä–æ–¥–∞–∂–∞ #{s['id']}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: *{s['title']}* (ID: {s['product_id']})\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {s['description']}\n"
            f"üíµ –¶–µ–Ω–∞: *{format_money(s['price'])}*\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{s['buyer_username'] or '–∞–Ω–æ–Ω'}\n"
            f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏: {created_at_msk}")
    markup = simple_markup([
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_sales|{s['seller_id']}|1")]
    ])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

# ---------------- Settings ----------------
@dp.callback_query(lambda c: c.data == "menu_settings")
async def cb_settings(callback: CallbackQuery):
    if await maintenance_block(callback): return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT notify_enabled FROM users WHERE user_id=?", (callback.from_user.id,)) as cur:
            r = await cur.fetchone()
            notify_status = "–≤–∫–ª—é—á–µ–Ω—ã" if r['notify_enabled'] == 1 else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: *{notify_status}*"
    markup = simple_markup([
        [InlineKeyboardButton(text="üîä –í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="seller_edit_info")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
    ])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "toggle_notifications")
async def cb_toggle_notifications(callback: CallbackQuery):
    if await maintenance_block(callback): return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT notify_enabled FROM users WHERE user_id=?", (callback.from_user.id,)) as cur:
            r = await cur.fetchone()
            new_status = 0 if r['notify_enabled'] == 1 else 1
        await conn.execute("UPDATE users SET notify_enabled=? WHERE user_id=?", (new_status, callback.from_user.id))
        await conn.commit()
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status == 1 else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.message.answer(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}.", reply_markup=main_menu_markup(callback.from_user.id))
    await callback.answer()

# ---------------- Admin panel ----------------
@dp.callback_query(lambda c: c.data == "menu_admin")
async def cb_admin(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    markup = simple_markup([
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_balances")],
        [InlineKeyboardButton(text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_cats")],
        [InlineKeyboardButton(text="üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_subcats")],
        [InlineKeyboardButton(text="üóÇ –¢–æ–≤–∞—Ä—ã (–∏—Å–∫–∞—Ç—å/—É–¥–∞–ª—è—Ç—å/–ø—Ä–∞–≤–∏—Ç—å)", callback_data="admin_products")],
        [InlineKeyboardButton(text="‚öñÔ∏è –°–ø–æ—Ä—ã", callback_data="admin_disputes")],
        [InlineKeyboardButton(text="üõ† –¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å", callback_data="admin_toggle_maintenance")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
    ])
    await callback.message.answer("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_toggle_maintenance")
async def cb_admin_toggle_maintenance(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT value FROM settings WHERE key='maintenance'") as cur:
            val = (await cur.fetchone())['value']
        new = 'off' if val == 'on' else 'on'
        await conn.execute("UPDATE settings SET value=? WHERE key='maintenance'", (new,))
        await conn.commit()
    await callback.message.answer(f"üõ† –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new}", reply_markup=main_menu_markup(callback.from_user.id))
    await callback.answer(f"–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç: {new}")

@dp.callback_query(lambda c: c.data == "admin_balances")
async def cb_admin_balances(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    markup = simple_markup([
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ user_id", callback_data="admin_search_user")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")]
    ])
    await callback.message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_search_user")
async def cb_admin_search_user(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    await state.set_state(AdminSearchUser.user_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminSearchUser.user_id)
async def admin_process_user_search(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    try:
        target = int(message.text.strip())
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
        return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT user_id, username, balance FROM users WHERE user_id=?", (target,)) as cur:
            user = await cur.fetchone()
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    await state.set_data({"target_user_id": target})
    markup = simple_markup([
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_change_balance|{target}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_balances")]
    ])
    await message.answer(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username'] or '–∞–Ω–æ–Ω'}\nüí∞ –ë–∞–ª–∞–Ω—Å: {format_money(user['balance'])}",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("admin_change_balance|"))
async def cb_admin_change_balance(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    target = int(callback.data.split("|", 1)[1])
    await state.set_state(AdminBalanceChange.amount)
    await state.set_data({"target_user_id": target})
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –≤—ã—á–µ—Ç–∞):", 
                                reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminBalanceChange.amount)
async def admin_process_balance_change(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    try:
        amount = float(message.text.strip().replace(',', '.'))
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50 –∏–ª–∏ -50.25).", reply_markup=cancel_markup())
        return
    data = await state.get_data()
    target = data.get("target_user_id")
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT balance FROM users WHERE user_id=?", (target,)) as cur:
            user = await cur.fetchone()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_markup(message.from_user.id))
            await state.clear()
            return
        new_balance = max(0.0, user['balance'] + amount)
        await conn.execute("UPDATE users SET balance=? WHERE user_id=?", (new_balance, target))
        await conn.commit()
    action = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if amount > 0 else "–≤—ã—á—Ç–µ–Ω–æ"
    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω: {action} {format_money(abs(amount))}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_money(new_balance)}",
        reply_markup=main_menu_markup(message.from_user.id)
    )
    if await is_notify_enabled(target):
        try:
            await bot.send_message(
                target, 
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {action} {format_money(abs(amount))}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_money(new_balance)}"
            )
        except Exception:
            pass
    await state.clear()

@dp.callback_query(lambda c: c.data == "admin_cats")
async def cb_admin_cats(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    markup = await build_admin_categories_markup()
    await callback.message.answer("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_subcats")
async def cb_admin_subcats(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    markup = await build_categories_markup(admin_view=True)
    await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("admin_view_cat|"))
async def cb_admin_view_cat(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    cat_id = int(callback.data.split("|", 1)[1])
    markup = await build_admin_subcategories_markup(cat_id)
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT name FROM categories WHERE id=?", (cat_id,)) as cur:
            cat = await cur.fetchone()
    if not cat:
        await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    await callback.message.answer(f"üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è '{cat['name']}':", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_create_category")
async def cb_admin_create_category(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    await state.set_state(AdminNewCategory.name)
    await callback.message.answer("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminNewCategory.name)
async def admin_process_new_category(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    name = message.text.strip()
    try:
        async with aiosqlite.connect(DB_FILE) as conn:
            await conn.execute("INSERT INTO categories(name) VALUES (?)", (name,))
            await conn.commit()
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=cancel_markup())
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("admin_edit_cat|"))
async def cb_admin_edit_category(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    cat_id = int(callback.data.split("|", 1)[1])
    await state.set_state(AdminEditCategory.name)
    await state.set_data({"cat_id": cat_id})
    await callback.message.answer("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminEditCategory.name)
async def admin_process_edit_category(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    name = message.text.strip()
    data = await state.get_data()
    cat_id = data.get("cat_id")
    try:
        async with aiosqlite.connect(DB_FILE) as conn:
            await conn.execute("UPDATE categories SET name=? WHERE id=?", (name, cat_id))
            await conn.commit()
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=cancel_markup())
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("admin_delete_cat|"))
async def cb_admin_delete_category(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    cat_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT COUNT(*) as cnt FROM products WHERE category_id=?", (cat_id,)) as cur:
            prod_count = (await cur.fetchone())['cnt']
        if prod_count > 0:
            await callback.message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã.")
            await callback.answer()
            return
        await conn.execute("DELETE FROM subcategories WHERE category_id=?", (cat_id,))
        await conn.execute("DELETE FROM categories WHERE id=?", (cat_id,))
        await conn.commit()
    await callback.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=await build_admin_categories_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("admin_create_sub|"))
async def cb_admin_create_subcategory(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    cat_id = int(callback.data.split("|", 1)[1])
    await state.set_state(AdminNewSub.name)
    await state.set_data({"cat_id": cat_id})
    await callback.message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminNewSub.name)
async def admin_process_new_subcategory(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    name = message.text.strip()
    data = await state.get_data()
    cat_id = data.get("cat_id")
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("INSERT INTO subcategories(category_id, name) VALUES (?,?)", (cat_id, name))
        await conn.commit()
    await message.answer("‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=await build_admin_subcategories_markup(cat_id))
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("admin_edit_sub|"))
async def cb_admin_edit_subcategory(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    sub_id = int(callback.data.split("|", 1)[1])
    await state.set_state(AdminEditSub.name)
    await state.set_data({"sub_id": sub_id})
    await callback.message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminEditSub.name)
async def admin_process_edit_subcategory(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    name = message.text.strip()
    data = await state.get_data()
    sub_id = data.get("sub_id")
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT category_id FROM subcategories WHERE id=?", (sub_id,)) as cur:
            cat = await cur.fetchone()
        if not cat:
            await message.answer("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
            await state.clear()
            return
        await conn.execute("UPDATE subcategories SET name=? WHERE id=?", (name, sub_id))
        await conn.commit()
    await message.answer("‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=await build_admin_subcategories_markup(cat['category_id']))
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("admin_delete_sub|"))
async def cb_admin_delete_subcategory(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    sub_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT category_id, (SELECT COUNT(*) FROM products WHERE subcategory_id=?) as cnt FROM subcategories WHERE id=?", 
                               (sub_id, sub_id)) as cur:
            sub = await cur.fetchone()
        if not sub:
            await callback.message.answer("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return
        if sub['cnt'] > 0:
            await callback.message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã.")
            await callback.answer()
            return
        await conn.execute("DELETE FROM subcategories WHERE id=?", (sub_id,))
        await conn.commit()
    await callback.message.answer("‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=await build_admin_subcategories_markup(sub['category_id']))
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_products")
async def cb_admin_products(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    await state.set_state(AdminProdSearch.prod_id)
    await callback.message.answer("üõí –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminProdSearch.prod_id)
async def admin_process_product_search(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    try:
        pid = int(message.text.strip())
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_markup())
        return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT p.*, s.username as seller_username FROM products p LEFT JOIN sellers s ON p.seller_id = s.id WHERE p.id=?", (pid,)) as cur:
            p = await cur.fetchone()
    if not p:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    msk_tz = pytz.timezone('Europe/Moscow')
    created_at_msk = datetime.fromisoformat(p['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
    text = (
        f"üõí *–¢–æ–≤–∞—Ä* #{p['id']}: *{p['title']}*\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {p['description']}\n"
        f"üíµ –¶–µ–Ω–∞: *{format_money(p['price'])}*\n"
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {p['quantity']}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{p['seller_username'] or '–∞–Ω–æ–Ω'}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at_msk}"
    )
    markup = simple_markup([
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_product|{pid}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_product|{pid}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_products")]
    ])
    if p['photo_file_id']:
        await bot.send_photo(message.chat.id, p['photo_file_id'], caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        await message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("admin_delete_product|"))
async def cb_admin_delete_product(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    pid = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT title, seller_id FROM products WHERE id=?", (pid,)) as cur:
            p = await cur.fetchone()
        if not p:
            await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        await conn.execute("DELETE FROM products WHERE id=?", (pid,))
        await conn.commit()
        async with conn.execute("SELECT user_id FROM sellers WHERE id=?", (p['seller_id'],)) as cur:
            seller = await cur.fetchone()
        if seller and await is_notify_enabled(seller['user_id']):
            try:
                await bot.send_message(seller['user_id'], f"üóë –í–∞—à —Ç–æ–≤–∞—Ä '{p['title']}' —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu_markup(callback.from_user.id))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("admin_edit_product|"))
async def cb_admin_edit_product(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    pid = int(callback.data.split("|", 1)[1])
    await state.set_state(AdminEditProduct.name)
    await state.set_data({"pid": pid})
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminEditProduct.name)
async def admin_process_product_name(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    name = message.text.strip()
    await state.set_state(AdminEditProduct.desc)
    await state.update_data(name=name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))

@dp.message(AdminEditProduct.desc)
async def admin_process_product_desc(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    data = await state.get_data()
    pid = data.get("pid")
    name = data.get("name")
    desc = message.text.strip()
    async with aiosqlite.connect(DB_FILE) as conn:
        await conn.execute("UPDATE products SET title=?, description=? WHERE id=?", (name, desc, pid))
        await conn.commit()
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

@dp.callback_query(lambda c: c.data == "admin_disputes")
async def cb_admin_disputes(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id, order_id, user_id, status, created_at FROM disputes WHERE status='open' ORDER BY created_at DESC") as cur:
            disputes = await cur.fetchall()
    if not disputes:
        await callback.message.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ä–æ–≤ –Ω–µ—Ç.", reply_markup=main_menu_markup(callback.from_user.id))
        await callback.answer()
        return
    buttons = []
    msk_tz = pytz.timezone('Europe/Moscow')
    for d in disputes:
        created_at_msk = datetime.fromisoformat(d['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
        buttons.append([InlineKeyboardButton(
            text=f"–°–ø–æ—Ä #{d['id']} (–ó–∞–∫–∞–∑ #{d['order_id']}, {created_at_msk})", 
            callback_data=f"view_dispute|{d['id']}"
        )])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")])
    markup = simple_markup(buttons)
    await callback.message.answer("‚öñÔ∏è –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Ä—ã:", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("view_dispute|"))
async def cb_view_dispute(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    dispute_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
            """SELECT d.*, u.username as user_username, p.title, p.seller_id, s.user_id as seller_user_id, s.username as seller_username
               FROM disputes d 
               JOIN orders o ON d.order_id = o.id
               JOIN users u ON d.user_id = u.user_id
               JOIN products p ON o.product_id = p.id
               JOIN sellers s ON p.seller_id = s.id
               WHERE d.id=?""", (dispute_id,)
        ) as cur:
            d = await cur.fetchone()
    if not d:
        await callback.message.answer("–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    msk_tz = pytz.timezone('Europe/Moscow')
    created_at_msk = datetime.fromisoformat(d['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
    text = (
        f"‚öñÔ∏è –°–ø–æ—Ä #{d['id']}\n"
        f"üì¶ –ó–∞–∫–∞–∑ #{d['order_id']}\n"
        f"üõí –¢–æ–≤–∞—Ä: {d['title']}\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{d['user_username'] or '–∞–Ω–æ–Ω'}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{d['seller_username'] or '–∞–Ω–æ–Ω'}\n"
        f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {d['description']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at_msk}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {d['status']}"
    )
    markup = simple_markup([
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"close_dispute|{d['id']}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_disputes")]
    ])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("close_dispute|"))
async def cb_close_dispute(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await callback.answer()
        return
    dispute_id = int(callback.data.split("|", 1)[1])
    await state.set_state(AdminCloseDispute.reason)
    await state.set_data({"dispute_id": dispute_id})
    await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–æ—Ä–∞:", reply_markup=cancel_markup("–û—Ç–º–µ–Ω–∞"))
    await callback.answer()

@dp.message(AdminCloseDispute.reason)
async def admin_process_close_dispute(message: Message, state: FSMContext):
    if message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "‚ùå"):
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu_markup(message.from_user.id))
        await state.clear()
        return
    reason = message.text.strip()
    data = await state.get_data()
    dispute_id = data.get("dispute_id")
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT user_id, order_id FROM disputes WHERE id=?", (dispute_id,)) as cur:
            d = await cur.fetchone()
        if not d:
            await message.answer("–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_markup(message.from_user.id))
            await state.clear()
            return
        await conn.execute("UPDATE disputes SET status='closed', close_reason=? WHERE id=?", (reason, dispute_id))
        await conn.commit()
        if await is_notify_enabled(d['user_id']):
            try:
                await bot.send_message(
                    d['user_id'], 
                    f"‚öñÔ∏è –°–ø–æ—Ä #{dispute_id} –ø–æ –∑–∞–∫–∞–∑—É #{d['order_id']} –∑–∞–∫—Ä—ã—Ç.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
            except Exception:
                pass
    await message.answer("‚úÖ –°–ø–æ—Ä –∑–∞–∫—Ä—ã—Ç.", reply_markup=main_menu_markup(message.from_user.id))
    await state.clear()

# ---------------- Support ----------------
@dp.callback_query(lambda c: c.data == "menu_support")
async def cb_support(callback: CallbackQuery):
    if await maintenance_block(callback): return
    markup = simple_markup([
        [InlineKeyboardButton(text="üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/mexanickq")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")]
    ])
    await callback.message.answer(
        f"üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞ {MARKET_NAME}\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",  
        reply_markup=markup
    )
    await callback.answer()

# ---------------- Orders ----------------
@dp.callback_query(lambda c: c.data == "menu_my_orders")
async def cb_my_orders(callback: CallbackQuery):
    if await maintenance_block(callback): return
    user_id = callback.from_user.id
    page = 1
    per_page = 10
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT COUNT(*) as cnt FROM orders WHERE user_id=?", (user_id,)) as cur:
            total = (await cur.fetchone())['cnt']
        async with conn.execute(
            """SELECT o.id, o.created_at, o.price, p.title, s.username as seller_username
               FROM orders o 
               JOIN products p ON o.product_id = p.id
               JOIN sellers s ON o.seller_id = s.id
               WHERE o.user_id=? 
               ORDER BY o.created_at DESC LIMIT ? OFFSET ?""", 
            (user_id, per_page, (page-1)*per_page)
        ) as cur:
            orders = await cur.fetchall()
    if not orders:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.", reply_markup=main_menu_markup(callback.from_user.id))
        await callback.answer()
        return
    buttons = []
    msk_tz = pytz.timezone('Europe/Moscow')
    for o in orders:
        created_at_msk = datetime.fromisoformat(o['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
        buttons.append([InlineKeyboardButton(
            text=f"üõí {o['title']} ({format_money(o['price'])})", 
            callback_data=f"view_order|{o['id']}"
        )])
    total_pages = (total + per_page - 1) // per_page
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è Prev", callback_data=f"my_orders|{user_id}|{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="Next ‚ñ∂Ô∏è", callback_data=f"my_orders|{user_id}|{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_main")])
    markup = simple_markup(buttons)
    await callback.message.answer(f"üìã –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):", reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("view_order|"))
async def cb_view_order(callback: CallbackQuery):
    if await maintenance_block(callback): return
    order_id = int(callback.data.split("|", 1)[1])
    async with aiosqlite.connect(DB_FILE) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
            """SELECT o.*, p.title, p.description, s.username as seller_username
               FROM orders o 
               JOIN products p ON o.product_id = p.id
               JOIN sellers s ON o.seller_id = s.id
               WHERE o.id=? AND o.user_id=?""", 
            (order_id, callback.from_user.id)
        ) as cur:
            o = await cur.fetchone()
    if not o:
        await callback.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à.")
        await callback.answer()
        return
    msk_tz = pytz.timezone('Europe/Moscow')
    created_at_msk = datetime.fromisoformat(o['created_at']).astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
    text = (
        f"üìã –ó–∞–∫–∞–∑ #{o['id']}\n"
        f"üõí –¢–æ–≤–∞—Ä: *{o['title']}*\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {o['description']}\n"
        f"üíµ –¶–µ–Ω–∞: *{format_money(o['price'])}*\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{o['seller_username'] or '–∞–Ω–æ–Ω'}\n"
        f"üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {created_at_msk}"
    )
    markup = simple_markup([
        [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review|{o['product_id']}")],
        [InlineKeyboardButton(text="‚öñÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dispute|{o['id']}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_my_orders")]
    ])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=markup)
    await callback.answer()

# ---------------- Navigation ----------------
@dp.callback_query(lambda c: c.data == "menu_back_main")
async def cb_back_main(callback: CallbackQuery):
    if await maintenance_block(callback): return
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_markup(callback.from_user.id))
    await callback.answer()

@dp.callback_query(lambda c: c.data == "action_cancel")
async def cb_action_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup(callback.from_user.id))
    await callback.answer()

# ---------------- Main ----------------
async def on_startup():
    asyncio.create_task(background_payment_checker())
    logging.info("–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞.")

async def main():
    await init_db()
    dp.startup.register(on_startup)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":

    asyncio.run(main())
